c-----------------------------------------------------------------------
c> @defgroup abl The ABL case user-file
c> Contains: user specified routines for the ABL case
c>     - uservp()  : variable properties
c>     - userf()   : local acceleration term for fluid
c>     - userq()   : local source term for scalars
c>     - userbc()  : boundary conditions
c>     - useric()  : initial conditions
c>     - userchk() : general purpose routine for checking errors etc.
c>     - userqtl() : thermal divergence for lowMach number flows
c>     - usrdat()  : modify element vertices
c>     - usrdat2() : modify mesh coordinates
c>     - usrdat3() : general purpose routine for initialization
c>
c> @{
c----------------------------------------------------------------------
c drive flow with pressure gradient

c> Set variable properties, does not call any subroutines / functions.
c> @param ix x-index
c> @param iy y-index
c> @param iz z-index
c> @param ieg element index
c> @todo implement ifield = 2 case for temperature
      subroutine uservp(ix,iy,iz,ieg) ! set variable properties

      implicit none

      include 'SIZE'
      include 'NEKUSE'  ! udiff, utrans
      include 'PARALLEL'  ! gllel
      include 'SGS'  ! ediff
      include 'TSTEP'  ! ifield

      integer ix,iy,iz,ieg,iel

      ! local element index
      iel = gllel(ieg)

      if (ifield.eq.1) then  ! velocity
        udiff = ediff(ix,iy,iz,iel)  ! dynamic viscosity
        utrans = 1.0  ! density
      else if (ifield.eq.2) then  ! temperature when IFHEAT = .true.
        udiff = 1.0  ! conductivity
        utrans = 1.0  ! rho*cp
      endif

      return
      end
c-----------------------------------------------------------------------
c> Compute Coriolis acceleration
c> \f[ F_x, F_z = - f\hat{e}_y \times \vec{u} \f]
c> See https://lists.mcs.anl.gov/pipermail/nek5000-users/2014-May/002798.html
c> @note The Coroiolis acceleration also absorbs the part of the
c>   pressure under hydrostatic balance, which in turn drives the flow.
c>   When it is turned off, usrdat3() drives the flow.
c> @param[in]    ix,iy,iz        GLL point index
c> @param[in]    eg              global element number
c> @callgraph
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      implicit none

      include 'SIZE'
      include 'INPUT'           ! uparam
      include 'PARALLEL'        ! GLLEL
      include 'NEKUSE'            ! ffx, ffy, ffz, ux, uz

      ! argument list
      integer ix,iy,iz,eg

      ! local variables
      real U_GEO, f_corio


      U_GEO = uparam(3)
      f_corio = uparam(4)

      ffx = 0.0 ! f_corio * uz
      ffy = 0.0
      ffz = 0.0 ! -f_corio * (ux - U_GEO)

      call pen_forcing(ix, iy, iz, eg)

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'NEKUSE'  ! qvol

c      integer e
c     e = gllel(eg)
      ! source = 0.0
      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
c> Set up initial conditions
c> @callgraph
      subroutine useric(ix,iy,iz,eg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'  ! x, y, z, ux, uy, uz, temp
      include 'PARALLEL'  ! gllel
      include 'GEOM'  ! ym1
      include 'INPUT'  ! uparam
      include 'WMLES'  ! KAPPA, PI_, y0

      integer ix,iy,iz,eg
      real rand1, rand2, rand3
      real eps, kx, kz, alpha, beta, perturb_thick
      real U_GEO, XLEN, YLEN, ZLEN

c      ux   = 1.0
c      uy   = 0.0
c      uz   = 0.0
      temp = 0.0

c     Geostrophic velocity
      U_GEO = uparam(3)
c     Get mesh lengths from userParam0{5,6,7}
      XLEN = uparam(5)
      YLEN = uparam(6)
      ZLEN = uparam(7)

      ! ie=gllel(eg)
      ! NOTE: smoother function for ux and wavenumbers alpha and beta changed after
      ! version 0.2.1
      ux   = U_GEO * ((y / YLEN)**(1. / 7.))

c     perturbation tries!! (not working)
c> Use standard subroutine RANDOM_NUMBER.
c> See https://gcc.gnu.org/onlinedocs/gfortran/RANDOM_005fNUMBER.html

      kx  = 11
      kz  = 11

      alpha = kx * 2 * PI_* 40 / XLEN
      beta  = kz * 2 * PI_* 40 / ZLEN

      ! estimated boundary layer thickness, which might vary
      perturb_thick = 0.4 * YLEN
      ! See: Beare et al., “An Intercomparison of Large-Eddy Simulations of the
      ! Stable Boundary Layer.” pp. 4
      if (y < perturb_thick) then
        ! fills ~2 / 3 of perturb_thick and smoothly decays
        eps = (1. - tanh(3 * y / perturb_thick)) * 1e-3
        call random_number(rand1)
        call random_number(rand2)
        call random_number(rand3)
      else
        eps = 0.
        rand1 = 0.
        rand2 = 0.
        rand3 = 0.
      endif

      !- a boundary-layer-like profile
      !- eps * (large scale sinusoidal field + random noise)
      ux  = ux !+ eps*(beta * sin(alpha*x)*cos(beta*z) + rand1 * 1e-1)
      uy  = 0. !+ eps*(       sin(alpha*x)*sin(beta*z) + rand2 * 1e-1)
      uz  = 0. !- eps*(alpha * cos(alpha*x)*sin(beta*z) + rand3 * 1e-1)

      return
      end
c-----------------------------------------------------------------------
c> Compute the boundary condition. See subdirectory bc/
c> @callgraph
      subroutine userbc(ix,iy,iz,iside,eg)
      implicit none
      integer ix, iy, iz, iside, eg

      call abl_userbc(ix, iy, iz, iside, eg)

      return
      end
c-----------------------------------------------------------------------
c> Compute the turbulent stress tensors and write statistics
c> @callgraph
      subroutine userchk()

      implicit none

      include 'SIZE'
      include 'GEOM'  ! ym1
      include 'INPUT'  ! IF3D, PARAM
      include 'SOLN'  ! t, pr, vx
      include 'TSTEP'  ! ISTEP, lastep, time
      include 'SGS'  ! dg2, ediff, du_dx, du_dy, du_dz
      include 'CHKPOINTD'  ! chpt_ifrst
      include 'WMLES'  ! KAPPA

      integer e, n
#ifdef DEBUG
      integer i
      real diff_dy
      real du_dy_test(lx1,ly1,lz1,lelv)
#endif

      n=nx1*ny1*nz1*nelv

      ! KTH toolbox related
      ! -------------------
      ! start framework
      if (ISTEP.eq.0) call frame_start

      ! monitor simulation
      call frame_monitor

      ! save/load files for full-restart
      call chkpt_main

      ! compute velocity gradient
      call cart_diff_y(du_dy, vx, .true.)
#ifdef DEBUG
      call gradm1(du_dx, du_dy_test, du_dz, vx)
      do i=1,n
         diff_dy = abs(du_dy(i,1,1,1) - du_dy_test(i,1,1,1))
         if (diff_dy >= 1e-14) call exittr(
     &         "Result of gradm1 and cart_diff_y are not equivalent$",
     &         diff_dy, 0)
      enddo
#endif

!     for penalty
      call pen_update

c     calculate eddy viscosity and total viscosity
c     Placed here because
c       - frame_monitor would read the WMLES parameters and
c       - chkpt_main would load velocity data required for calculating ediff
      if(ifuservp) then
        if (nid.eq.0) write(6,*) 'Calculating eddy viscosity'
        do e=1,nelv
           call eddy_visc(e)
        enddo
        call copy(t,ediff,n)
      endif

#ifdef DEBUG
      print *,  "ediff (min/max) = ", minval(ediff), maxval(ediff)
#endif

      ! statistics computed by toolbox
      call stat_avg

      ! spatially averged statistics
      if ((mod(istep, 20) .eq. 0) .and. (istep .gt. 0)) then
         call bounds_check(courno)  ! Bounds check via inspecting Courant number
         call spatial_means
      endif

      ! finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      else if (istep .eq. 0 .and. (.not. chpt_ifrst)) then
         ! first timestep which is not restarted
         call outpost(vx, vy, vz, pr, t, '   ')  ! write initial condition
      endif

      return
      end
c-----------------------------------------------------------------------
c> @callgraph
      subroutine userqtl ! Set thermal divergence

      implicit none

      call userqtl_scig

      return
      end
c-----------------------------------------------------------------------
c> @callgraph
      subroutine usrdat()   ! This routine to modify element vertices

      implicit none

      include 'SIZE'
      include 'INPUT'  ! param
      include 'SGS'  ! ediff, dg2

      integer n, u_nelt, nelt_global, nelt_

      ! check SIZE file constraints
      u_nelt = u_nelx * u_nely * u_nelz
      ! MPI_reduce
      nelt_ = nelt
      call igop(nelt_, nelt_global, '+  ', 1)
#ifdef DEBUG
      print *, "usrdat: u_nelx*u_nely*u_nelz & nelt=", u_nelt, nelt
#endif
      if (u_nelt .ne. nelt_global) then
         call exitti(
     &       'u_nelx*u_nely*u_nelz != nelt, fix them!$', nelt_global)
      endif

      ! initialize variables
      n = nx1*ny1*nz1*nelt
      call cfill(ediff,param(2),n)
      call cfill(dg2,1.0,n)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

      implicit none

      include 'SIZE'
      include 'SGS_BC'  ! nlev_bc, u_star_bc, alpha_bc, mask_bc

      integer n_bc

c     Define Delta for Smagorinsky method
      call set_grid_spacing  ! set dg2

      ! Initialize SGS_BC arrays with 0.
      n_bc = nx1*nlev_bc*nz1*nelv
      call rzero(u_star_bc, n_bc)
      call rzero(alpha_bc, n_bc)
      call rzero(mask_bc, n_bc)

      u_star_max = 0.0

      call calc_area_bc

      return
      end
c-----------------------------------------------------------------------
c> Compute inflow / outflow conditions a.k.a. driving force. Ubar=1
c> Not required when coriolis force is specified in userf
c> @see https://github.com/Nek5000/NekExamples/blob/70a5792b04b7a4c2da16463f517863b10627398f/turbChannel/turbChannel.usr#L375-L386
c> @callgraph
      subroutine usrdat3()

      implicit none

      include 'SIZE'

      include 'INPUT'  ! param, uparam

      param(54) = -1  ! use >0 for const flowrate or <0 bulk vel
                      ! flow direction is given by (1=x, 2=y, 3=z)
      param(55) = uparam(3)  ! flowrate/bulk-velocity
      return
      end
c ----------------------------------------------------------------------
c> @}
c end of group abl
!======================================================================
c> @defgroup framework KTH Framework: user-file subroutines
c> @{
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call io_register
      call chkpt_register
      call stat_register
      call wmles_register
      call pen_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
      include 'SOLN'
!-----------------------------------------------------------------------
!     initialise modules
      call chkpt_init
      call stat_init
      call wmles_init
      call pen_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     finalise modules

      return
      end subroutine
!======================================================================
!======================================================================
!> @brief Provide element coordinates and local numbers (user interface)
!! @param[out]  idir              mapping (uniform) direction
!! @param[out]  ctrs              2D element centres
!! @param[out]  cell              local element numberring
!! @param[in]   lctrs1,lctrs2     array sizes
!! @param[out]  nelsort           number of local 3D elements to sort
!! @param[out]  map_xm1, map_ym1  2D coordinates of mapped elements
!! @param[out]  ierr              error flag
      subroutine user_map2d_get(idir,ctrs,cell,lctrs1,lctrs2,nelsort,
     $     map_xm1,map_ym1,ierr)
      implicit none

      include 'SIZE'
      include 'INPUT'           ! [XYZ]C
      include 'GEOM'            ! [XYZ]M1

!     argument list
      integer idir
      integer lctrs1,lctrs2
      real ctrs(lctrs1,lctrs2)  ! 2D element centres  and diagonals
      integer cell(lctrs2)      ! local element numberring
      integer nelsort           ! number of local 3D elements to sort
      real map_xm1(lx1,lz1,lelt), map_ym1(lx1,lz1,lelt)
      integer ierr              ! error flag

!     local variables
      integer ntot              ! tmp array size for copying
      integer el ,il ,jl        ! loop indexes
      integer nvert             ! vertex number
      real rnvert               ! 1/nvert
      real xmid,ymid            ! 2D element centre
      real xmin,xmax,ymin,ymax  ! to get approximate element diagonal
      integer ifc               ! face number

!     dummy arrays
      real xcoord(8,LELT), ycoord(8,LELT) ! tmp vertex coordinates

#ifdef DEBUG
!     for testing
      character*3 str1, str2
      integer iunit, ierrl
      ! call number
      integer icalldl
      save icalldl
      data icalldl /0/
#endif

!-----------------------------------------------------------------------
!     initial error flag
      ierr = 0
!     set important parameters
!     uniform direction; should be taken as input parameter
!     x-> 1, y-> 2, z-> 3
      idir = 3

!     get element midpoints
!     vertex number
      nvert = 2**NDIM
      rnvert= 1.0/real(nvert)

!     eliminate uniform direction
      ntot = 8*NELV
      if (idir.EQ.1) then  ! uniform X
         call copy(xcoord,YC,ntot) ! copy y
         call copy(ycoord,ZC,ntot) ! copy z
      elseif (idir.EQ.2) then  ! uniform Y
         call copy(xcoord,XC,ntot) ! copy x
         call copy(ycoord,ZC,ntot) ! copy z
      elseif (idir.EQ.3) then  ! uniform Z
         call copy(xcoord,XC,ntot) ! copy x
         call copy(ycoord,YC,ntot) ! copy y
      endif

!     set initial number of elements to sort
      nelsort = 0
      call izero(cell,NELT)

!     for every element
      do el=1,NELV
!     element centre
         xmid = xcoord(1,el)
         ymid = ycoord(1,el)
!     element diagonal
         xmin = xmid
         xmax = xmid
         ymin = ymid
         ymax = ymid
         do il=2,nvert
            xmid=xmid+xcoord(il,el)
            ymid=ymid+ycoord(il,el)
            xmin = min(xmin,xcoord(il,el))
            xmax = max(xmax,xcoord(il,el))
            ymin = min(ymin,ycoord(il,el))
            ymax = max(ymax,ycoord(il,el))
         enddo
         xmid = xmid*rnvert
         ymid = ymid*rnvert

!     count elements to sort
            nelsort = nelsort + 1
!     2D position
!     in general this coud involve some curvilinear transform
            ctrs(1,nelsort)=xmid
            ctrs(2,nelsort)=ymid
!     reference distance
            ctrs(3,nelsort)=sqrt((xmax-xmin)**2 + (ymax-ymin)**2)
            if (ctrs(3,nelsort).eq.0.0) then
               ierr = 1
               return
            endif
!     element index
            cell(nelsort) = el
      enddo

!     provide 2D mesh
!     in general this coud involve some curvilinear transform
      if (idir.EQ.1) then  ! uniform X
         ifc = 4
         do el=1,NELV
            call ftovec(map_xm1(1,1,el),ym1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),zm1,el,ifc,nx1,ny1,nz1)
         enddo
      elseif (idir.eq.2) then  ! uniform y
         ifc = 1
         do el=1,nelv
            call ftovec(map_xm1(1,1,el),xm1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),zm1,el,ifc,nx1,ny1,nz1)
         enddo
      elseif (idir.eq.3) then  ! uniform z
         ifc = 5
         do el=1,nelv
            call ftovec(map_xm1(1,1,el),xm1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),ym1,el,ifc,nx1,ny1,nz1)
         enddo
      endif

#ifdef DEBUG
!     testing
      ! to output refinement
      icalldl = icalldl+1
      call io_file_freeid(iunit, ierrl)
      write(str1,'(i3.3)') NID
      write(str2,'(i3.3)') icalldl
      open(unit=iunit,file='map2d_usr.txt'//str1//'i'//str2)

      write(iunit,*) idir, NELV, nelsort
      write(iunit,*) 'Centre coordinates and cells'
      do el=1,nelsort
         write(iunit,*) el, ctrs(:,el), cell(el)
      enddo
      write(iunit,*) 'GLL coordinates'
      do el=1,nelsort
         write(iunit,*) 'Element ', el
         write(iunit,*) 'XM1'
         do il=1,nz1
            write(iunit,*) (map_xm1(jl,il,el),jl=1,nx1)
         enddo
         write(iunit,*) 'YM1'
         do il=1,nz1
            write(iunit,*) (map_ym1(jl,il,el),jl=1,nx1)
         enddo
      enddo
      close(iunit)
#endif

      return
      end subroutine
!=======================================================================
!> @brief Provide velocity, deriv. and vort. in required coordinates
!! @param[out]  lvel             velocity
!! @param[out]  dudx,dvdx,dwdx   velocity derivatives
!! @param[out]  vort             vorticity
      subroutine user_stat_trnsv(lvel,dudx,dvdx,dwdx,vort)
      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'               ! if3d

!     argument list
      real lvel(LX1,LY1,LZ1,LELT,3) ! velocity array
      real dudx(LX1,LY1,LZ1,LELT,3) ! velocity derivatives; U
      real dvdx(LX1,LY1,LZ1,LELT,3) ! V
      real dwdx(LX1,LY1,LZ1,LELT,3) ! W
      real vort(LX1,LY1,LZ1,LELT,3) ! vorticity

!     local variables
      integer itmp              ! dummy variable
!-----------------------------------------------------------------------
!     Velocity transformation; simple copy (1, 2, 3) -> (1, 3, 2)
c
c>    NOTE: Coordinates swapped done for statistics!
c>    VY (numerical) -> w (physical, wall-normal direction)
c>    VZ (numerical) -> v (physical, spanwise direction)
c
      itmp = NX1*NY1*NZ1*NELV
      call copy(lvel(1,1,1,1,1),VX,itmp)
      call copy(lvel(1,1,1,1,3),VY,itmp)
      call copy(lvel(1,1,1,1,2),VZ,itmp)

!     Derivative transformation
c>    NOTE:
c>    d/dy (numerical, gradm1) -> d/dz (wall-normal direction)
c>    d/dz (numerical, gradm1) -> d/dy (physical spanwise direction)
      call gradm1(
     $  dudx(1,1,1,1,1), dudx(1,1,1,1,3), dudx(1,1,1,1,2),
     $  lvel(1,1,1,1,1))
      call gradm1(
     $  dvdx(1,1,1,1,1), dvdx(1,1,1,1,3), dvdx(1,1,1,1,2),
     $  lvel(1,1,1,1,2))
      call gradm1(
     $  dwdx(1,1,1,1,1), dwdx(1,1,1,1,3), dwdx(1,1,1,1,2),
     $  lvel(1,1,1,1,3))

!     get vorticity
      if (IF3D) then
!     curlx
        call sub3(
     $    vort(1,1,1,1,1), dwdx(1,1,1,1,2), dvdx(1,1,1,1,3), itmp)
!     curlz
        call sub3(
     $    vort(1,1,1,1,3), dvdx(1,1,1,1,1), dudx(1,1,1,1,2), itmp)
      endif
!     curly
        call sub3(
     $    vort(1,1,1,1,2), dudx(1,1,1,1,3), dwdx(1,1,1,1,1), itmp)

      return
      end subroutine
!======================================================================
!> Calculate spatial averaged quantities and write it into a text file.
      subroutine spatial_means
      implicit none
      include 'SIZE'
      include 'INPUT'  ! param, uparam
      include 'SOLN'  ! vx, vy
      include 'MASS'  ! bm1, volvm1
      include 'TSTEP'  ! time, istep
      include 'SGS_BC'  ! ustar_bc, mask_bc, area_bc, u_star_max

      real scale_vf(3)
      common /cvflow_r/ scale_vf

      ! local variables
      integer n, n_bc
      real ubar, e2, u_star_avg, u_star_max_, dpdx_avg, dpdy_avg
      real U_GEO, f_corio
      logical file_exists, header_written
      save header_written
      data header_written /.false./

      ! functions
      real glsc2, glsc3, glmax
      external glsc2, glsc3, glmax

      n = nx1*ny1*nz1*nelv
      ubar = glsc2(vx,bm1,n) / volvm1  ! bulk mean streamwise velocity
      e2 = glsc3(vy,bm1,vy,n) / volvm1  ! wall normal component of K.E. ?

      n_bc = nx1*nlev_bc*nz1*nelv
      u_star_avg = glsc2(u_star_bc, mask_bc, n_bc) / area_bc
      u_star_max_ = glmax(u_star_max, 1)


      if (param(55) .ne. 0) then
         dpdx_avg = -scale_vf(1)
         dpdy_avg = -scale_vf(3)
      else
         U_GEO = uparam(3)
         f_corio = uparam(4)

         dpdx_avg = 0.0
         dpdy_avg = -f_corio * U_GEO
      endif

      if (nid.eq.0) then
          if (.not. header_written) then
              inquire(file='spatial_means.txt', exist=file_exists)

              if (.not. file_exists) then
                 open(26, file='spatial_means.txt')
                 write(26, 22)
     &        "it", "t", "ux_avg", "ez_avg", "u_star_avg", "u_star_max",
     &        "dpdx_avg", "dpdy_avg"

   22            format(8A13)
                 close(26)
              endif

              header_written = .true.
          endif

         open(26, file='spatial_means.txt', position='append')
         write(26, 2) istep, time, ubar, e2, u_star_avg, u_star_max_,
     &     dpdx_avg, dpdy_avg
         close(26)

   2  format(I13, 1P 8E13.4)

      endif

      ! reset u_star_max
      u_star_max = 0.0

      end subroutine
!======================================================================
!> Check for nan or infinity
!! @param[in]  x   real, variable to be checked
      subroutine bounds_check(x)
      ! use ieee_arithmetic
      implicit none

      real x

      !! Testing
      ! x = ieee_value(1., ieee_quiet_nan)
      ! x = ieee_value(1., ieee_negative_inf)
      ! x = ieee_value(1., ieee_positive_inf)

      !> @todo Why are the error messages not displayed?
      if (abs(x) >= huge(x)) then
          call exitti("Inf encountered => bounds_check failed$", 0)
      elseif (isnan(x)) then
          call exitti("NaN encountered => bounds_check failed$", 0)
      endif
      end subroutine
!======================================================================
c> @}
c> @defgroup chkpoint KTH Toolbox: chkpoint
c> @defgroup chkpoint_mstep KTH Toolbox: chkpoint_mstep
c> @defgroup io_tools KTH Toolbox: io_tools
c> @defgroup math KTH Toolbox: math
c> @defgroup monitor KTH Toolbox: monitor
c> @defgroup runparam KTH Toolbox: runparam
c> @defgroup stat KTH Toolbox: stat
c vim: set ft=fortran
