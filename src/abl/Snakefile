import snek5000
from abl.output import OutputABL as Output


# Case name
CASE = "abl"
CONFIG = Output.get_configfile()


snek5000.ensure_env()


configfile: CONFIG

# Necessary to pass configuration to other Snakemake modules
Output.update_snakemake_config(config, CASE)


# default rule
rule all:
    input:
        "nek5000",


# shorthand for mesh
rule mesh:
    input:
        f"{CASE}.re2",
        f"{CASE}.ma2",


# compiler and run rules
# ======================
module compiler:
    snakefile:
        snek5000.get_asset("compiler.smk")
    config:
        config


use rule * from compiler

# # Bug: https://github.com/snakemake/snakemake/issues/958
# # unbuffered compile for colours
# use rule compile from compiler with:
#     params:
#         make="unbuffer make"


# I/O rules
# =========
module io:
    snakefile:
        snek5000.get_asset("io.smk")
    config:
        config


use rule * from io


# create a release with source files
rule release:
    input:
        f"{CASE}.box",
        f"{CASE}.par",
        f"{CASE}.usr",
        "SIZE",
        "compile.sh",
        "makefile_usr.inc",
        * list(Output().makefile_usr_sources),
    output:
        "abl-release.tar.gz",
    shell:
        """
        bsdtar czf {output} {input}
        """


# internal rules
# ==============
module internal:
    snakefile:
        snek5000.get_asset("internal.smk")
    config:
        config


use rule * from internal as internal_*


# generate compile.sh
rule generate_compile_sh:
    output:
        "compile.sh",
    run:
        from abl.templates import compile_sh as template

        Output.write_compile_sh(template, config, path=output)
